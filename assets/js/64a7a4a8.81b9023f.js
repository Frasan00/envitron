"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[633],{693:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"schema","title":"Schema Types","description":"Schemas are useful but not required, envitron loads all envs from a file and those envs can still be used, only they won\'t be type safe","source":"@site/docs/schema.md","sourceDirName":".","slug":"/schema","permalink":"/envitron/docs/schema","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"API Reference","permalink":"/envitron/docs/api"},"next":{"title":"How Environment Variables Are Parsed","permalink":"/envitron/docs/parsing"}}');var r=a(4848),t=a(8453);const o={sidebar_position:3},l="Schema Types",i={},c=[{value:"String",id:"string",level:2},{value:"Number",id:"number",level:2},{value:"Boolean",id:"boolean",level:2},{value:"Enum",id:"enum",level:2},{value:"Array",id:"array",level:2},{value:"Custom",id:"custom",level:2},{value:"Example",id:"example",level:3},{value:"Options",id:"options",level:2},{value:"Example",id:"example-1",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"schema-types",children:"Schema Types"})}),"\n",(0,r.jsx)(n.p,{children:"Schemas are useful but not required, envitron loads all envs from a file and those envs can still be used, only they won't be type safe\nEnvitron supports the following schema types for environment variables:"}),"\n",(0,r.jsx)(n.h2,{id:"string",children:"String"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.string();\nschema.string({ optional: true });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"number",children:"Number"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.number();\nschema.number({ optional: true });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"boolean",children:"Boolean"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.boolean();\nschema.boolean({ optional: true });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"enum",children:"Enum"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.enum(['development', 'production', 'test'] as const);\n"})}),"\n",(0,r.jsx)(n.h2,{id:"array",children:"Array"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.array();\nschema.array({ optional: true });\n"})}),"\n",(0,r.jsx)(n.h2,{id:"custom",children:"Custom"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"schema.custom((value) => {\n  // Your custom validation logic here\n  return transformedValue;\n});\n\nschema.custom(\n  (value) => {\n    // Your custom validation logic here\n    return transformedValue;\n  },\n  { optional: true }\n);\n"})}),"\n",(0,r.jsx)(n.p,{children:"The custom validator allows you to define your own validation and transformation logic for environment variables. The validator function receives the raw environment value and should return the transformed value.\nThe type of the env will be inferred from the return type of the function."}),"\n",(0,r.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const env = createEnvSchema((schema) => ({\n  // Divide the environment value by 2\n  CUSTOM_NUMBER: schema.custom((value) => Number(value) / 2),\n\n  // Transform a string to uppercase\n  CUSTOM_STRING: schema.custom((value) => String(value).toUpperCase()),\n\n  // Optional custom validator\n  OPTIONAL_CUSTOM: schema.custom((value) => Number(value) * 2, { optional: true }),\n}));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"options",children:"Options"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"optional: true"})," \u2014 makes the variable optional (value may be ",(0,r.jsx)(n.code,{children:"undefined"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"example-1",children:"Example"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-ts",children:"const env = createEnvSchema((schema) => ({\n  HOST: schema.string(),\n  PORT: schema.number(),\n  DEBUG: schema.boolean({ optional: true }),\n  NODE_ENV: schema.enum(['development', 'production', 'test'] as const),\n  ALLOWED_HOSTS: schema.array({ optional: true }),\n  CUSTOM_VALUE: schema.custom((value) => Number(value) / 2),\n}));\n"})}),"\n",(0,r.jsxs)(n.p,{children:["See ",(0,r.jsx)(n.a,{href:"/envitron/docs/api",children:"API Reference"})," for usage details."]})]})}function d(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,a)=>{a.d(n,{R:()=>o,x:()=>l});var s=a(6540);const r={},t=s.createContext(r);function o(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);