"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[726],{4404:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>a});const r=JSON.parse('{"id":"parsing","title":"How Environment Variables Are Parsed","description":"Environment variables are parsed with type safety and support for edge cases:","source":"@site/docs/parsing.md","sourceDirName":".","slug":"/parsing","permalink":"/envitron/docs/parsing","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Schema Types","permalink":"/envitron/docs/schema"}}');var l=s(4848),o=s(8453);const t={},i="How Environment Variables Are Parsed",c={},a=[{value:"Parsing Rules",id:"parsing-rules",level:2},{value:"Example",id:"example",level:2},{value:"Notes",id:"notes",level:2}];function d(e){const n={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,o.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(n.header,{children:(0,l.jsx)(n.h1,{id:"how-environment-variables-are-parsed",children:"How Environment Variables Are Parsed"})}),"\n",(0,l.jsx)(n.p,{children:"Environment variables are parsed with type safety and support for edge cases:"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Booleans:"})," ",(0,l.jsx)(n.code,{children:'"true"'}),", ",(0,l.jsx)(n.code,{children:'"false"'}),", true, false"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Numbers:"})," ",(0,l.jsx)(n.code,{children:'"123"'}),", ",(0,l.jsx)(n.code,{children:'"3.14"'})]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Enums:"})," Restrict to a set of allowed values"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Strings:"})," Handles quotes, spaces, special characters, escaping"]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Arrays:"})," CSV, quoted, single/double quotes"]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"parsing-rules",children:"Parsing Rules"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Double quotes (",(0,l.jsx)(n.code,{children:'"'}),")"]}),": Supports escape sequences (e.g., ",(0,l.jsx)(n.code,{children:"\\n"}),", ",(0,l.jsx)(n.code,{children:"\\t"}),", ",(0,l.jsx)(n.code,{children:'\\"'}),"). ",(0,l.jsx)(n.code,{children:"#"})," is treated as a literal character."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsxs)(n.strong,{children:["Single quotes (",(0,l.jsx)(n.code,{children:"'"}),")"]}),": Takes the literal value, no escape sequences. ",(0,l.jsx)(n.code,{children:"#"})," is treated as a literal character."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Unquoted"}),": Value is trimmed. ",(0,l.jsx)(n.code,{children:"#"})," starts a comment. No escape sequences."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Empty values"}),": If a variable exists but has no value (e.g., ",(0,l.jsx)(n.code,{children:"EMPTY="}),"), it returns ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]}),"\n",(0,l.jsx)(n.h2,{id:"example",children:"Example"}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-env",children:'BOOLEAN=true\nNUMBER=123\nCSV="foo,bar,baz"\nQUOTED_STRING="hello world"\nENUM_ENV=production\nDOUBLE_QUOTED_ESCAPES="line1\\nline2"\nSINGLE_QUOTED_LITERAL=\'line1\\nline2\'\nUNQUOTED_SPACES=   some value   # comment\nEMPTY=\nONLY_SPACES=\nHASH_VALUE="value#notacomment"\nUNQUOTED_HASH=foo # this is a comment\n'})}),"\n",(0,l.jsx)(n.pre,{children:(0,l.jsx)(n.code,{className:"language-ts",children:"const env = createEnvSchema(schema => ({\n  BOOLEAN: schema.boolean(),\n  NUMBER: schema.number(),\n  CSV: schema.array(),\n  QUOTED_STRING: schema.string(),\n  ENUM_ENV: schema.enum(['development', 'production', 'test'] as const),\n  DOUBLE_QUOTED_ESCAPES: schema.string(),\n  SINGLE_QUOTED_LITERAL: schema.string(),\n  UNQUOTED_SPACES: schema.string(),\n  EMPTY: schema.string(),\n  ONLY_SPACES: schema.string(),\n  HASH_VALUE: schema.string(),\n  UNQUOTED_HASH: schema.string(),\n}));\n\nconsole.log(env.get('BOOLEAN')); // true\nconsole.log(env.get('NUMBER')); // 123\nconsole.log(env.get('CSV')); // ['foo', 'bar', 'baz']\nconsole.log(env.get('QUOTED_STRING')); // 'hello world'\nconsole.log(env.get('ENUM_ENV')); // 'production'\nconsole.log(env.get('DOUBLE_QUOTED_ESCAPES')); // 'line1\\nline2' (with actual newline)\nconsole.log(env.get('SINGLE_QUOTED_LITERAL')); // 'line1\\nline2' (literal backslash-n)\nconsole.log(env.get('UNQUOTED_SPACES')); // 'some value'\nconsole.log(env.get('EMPTY')); // undefined\nconsole.log(env.get('ONLY_SPACES')); // undefined\nconsole.log(env.get('HASH_VALUE')); // 'value#notacomment'\nconsole.log(env.get('UNQUOTED_HASH')); // 'foo'\n"})}),"\n",(0,l.jsx)(n.h2,{id:"notes",children:"Notes"}),"\n",(0,l.jsxs)(n.ul,{children:["\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Enums"}),": If the value is not in the allowed set, an error is thrown at load time."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Quoting"}),": Use double quotes for escape sequences, single quotes for literal values, and unquoted for trimmed values with comment support."]}),"\n",(0,l.jsxs)(n.li,{children:[(0,l.jsx)(n.strong,{children:"Empty values"}),": Any variable present in the ",(0,l.jsx)(n.code,{children:".env"})," file but with no value will return ",(0,l.jsx)(n.code,{children:"undefined"}),"."]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,l.jsx)(n,{...e,children:(0,l.jsx)(d,{...e})}):d(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>i});var r=s(6540);const l={},o=r.createContext(l);function t(e){const n=r.useContext(o);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),r.createElement(o.Provider,{value:n},e.children)}}}]);