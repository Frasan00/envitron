"use strict";(self.webpackChunkdocs_site=self.webpackChunkdocs_site||[]).push([[825],{5215:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"embedded-env","title":"Embedded Environment Variables","description":"The Environment Manager provides two convenient ways to access your environment variables:","source":"@site/docs/embedded-env.md","sourceDirName":".","slug":"/embedded-env","permalink":"/envitron/docs/embedded-env","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"How Environment Variables Are Parsed","permalink":"/envitron/docs/parsing"}}');var r=t(4848),i=t(8453);const o={},c="Embedded Environment Variables",a={},l=[{value:"Direct Property Access",id:"direct-property-access",level:2},{value:"Using the Getter Method",id:"using-the-getter-method",level:2},{value:"Type Safety",id:"type-safety",level:2},{value:"Best Practices",id:"best-practices",level:2},{value:"See Also",id:"see-also",level:2}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",header:"header",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"embedded-environment-variables",children:"Embedded Environment Variables"})}),"\n",(0,r.jsx)(n.p,{children:"The Environment Manager provides two convenient ways to access your environment variables:"}),"\n",(0,r.jsx)(n.h2,{id:"direct-property-access",children:"Direct Property Access"}),"\n",(0,r.jsx)(n.p,{children:"You can access environment variables directly as properties of the environment manager instance. This provides a clean and intuitive way to access your configuration:"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:'const env = createEnvSchema((schema) => ({\n  DATABASE_URL: schema.string(),\n  PORT: schema.number(),\n  DEBUG: schema.boolean()\n}));\n\n// Access variables directly\nconsole.log(env.DATABASE_URL); // "postgres://localhost:5432/mydb"\nconsole.log(env.PORT); // 3000\nconsole.log(env.DEBUG); // true\n'})}),"\n",(0,r.jsx)(n.h2,{id:"using-the-getter-method",children:"Using the Getter Method"}),"\n",(0,r.jsxs)(n.p,{children:["For cases where you want to provide default values or handle missing variables, you can use the ",(0,r.jsx)(n.code,{children:"get()"})," method:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-typescript",children:"const env = createEnvSchema((schema) => ({\n  DATABASE_URL: schema.string(),\n  PORT: schema.number(),\n  DEBUG: schema.boolean()\n}));\n\n// Access with default values\nconsole.log(env.get('DATABASE_URL', 'postgres://localhost:5432/default'));\nconsole.log(env.get('PORT', 8080));\nconsole.log(env.get('DEBUG', false));\n"})}),"\n",(0,r.jsx)(n.h2,{id:"type-safety",children:"Type Safety"}),"\n",(0,r.jsx)(n.p,{children:"Both methods provide full TypeScript type safety based on your schema definition. The direct property access will infer the correct types from your schema, while the getter method will ensure the default value matches the expected type."}),"\n",(0,r.jsx)(n.h2,{id:"best-practices",children:"Best Practices"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Use direct property access for required variables that you know will always be present"}),"\n",(0,r.jsx)(n.li,{children:"Use the getter method when you need to provide fallback values"}),"\n",(0,r.jsx)(n.li,{children:"The getter method is particularly useful in development environments where some variables might be optional"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"see-also",children:"See Also"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/envitron/docs/basics",children:"Getting Started"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/envitron/docs/api",children:"API Reference"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"/envitron/docs/schema",children:"Schema Types"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>c});var s=t(6540);const r={},i=s.createContext(r);function o(e){const n=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:n},e.children)}}}]);